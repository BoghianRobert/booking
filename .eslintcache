[{"/home/robo/Projects/booking/src/index.js":"1","/home/robo/Projects/booking/src/App.js":"2","/home/robo/Projects/booking/src/reportWebVitals.js":"3","/home/robo/Projects/booking/src/routes.js":"4","/home/robo/Projects/booking/src/components/Main.js":"5","/home/robo/Projects/booking/src/utils/routeConstants.js":"6","/home/robo/Projects/booking/src/utils/index.js":"7","/home/robo/Projects/booking/src/components/HoursColumn.js":"8","/home/robo/Projects/booking/src/env.js":"9","/home/robo/Projects/booking/src/actions/playActions.js":"10","/home/robo/Projects/booking/src/actions/actionTypes.js":"11","/home/robo/Projects/booking/src/components/PlayRoom.js":"12","/home/robo/Projects/booking/src/reducers/rootReducers.js":"13","/home/robo/Projects/booking/src/reducers/playReducer.js":"14","/home/robo/Projects/booking/src/reducers/theaterReducer.js":"15","/home/robo/Projects/booking/src/actions/theaterActions.js":"16","/home/robo/Projects/booking/src/utils/getSeats.js":"17","/home/robo/Projects/booking/src/utils/findSeat.js":"18","/home/robo/Projects/booking/src/utils/getSeatPrice.js":"19","/home/robo/Projects/booking/src/utils/getTotalPrice.js":"20","/home/robo/Projects/booking/src/components/Admin.js":"21","/home/robo/Projects/booking/src/components/ControlPanel.js":"22","/home/robo/Projects/booking/src/utils/formatDate.js":"23","/home/robo/Projects/booking/src/utils/getTicketId.js":"24","/home/robo/Projects/booking/src/utils/buildDate.js":"25","/home/robo/Projects/booking/src/utils/buildDateNewPlay.js":"26","/home/robo/Projects/booking/src/components/PaymentHistory.js":"27"},{"size":999,"mtime":1618324792504,"results":"28","hashOfConfig":"29"},{"size":197,"mtime":1618324792504,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1618324792505,"results":"31","hashOfConfig":"29"},{"size":904,"mtime":1618324792505,"results":"32","hashOfConfig":"29"},{"size":6943,"mtime":1629106105589,"results":"33","hashOfConfig":"29"},{"size":181,"mtime":1618324792505,"results":"34","hashOfConfig":"29"},{"size":816,"mtime":1618324792505,"results":"35","hashOfConfig":"29"},{"size":652,"mtime":1618324792504,"results":"36","hashOfConfig":"29"},{"size":250,"mtime":1618324792504,"results":"37","hashOfConfig":"29"},{"size":161,"mtime":1618324792504,"results":"38","hashOfConfig":"29"},{"size":132,"mtime":1618324792504,"results":"39","hashOfConfig":"29"},{"size":5535,"mtime":1629125837925,"results":"40","hashOfConfig":"29"},{"size":224,"mtime":1618324792505,"results":"41","hashOfConfig":"29"},{"size":326,"mtime":1618324792505,"results":"42","hashOfConfig":"29"},{"size":345,"mtime":1618324792505,"results":"43","hashOfConfig":"29"},{"size":179,"mtime":1618324792504,"results":"44","hashOfConfig":"29"},{"size":187,"mtime":1618324792505,"results":"45","hashOfConfig":"29"},{"size":264,"mtime":1626979092180,"results":"46","hashOfConfig":"29"},{"size":127,"mtime":1618324792505,"results":"47","hashOfConfig":"29"},{"size":284,"mtime":1618324792505,"results":"48","hashOfConfig":"29"},{"size":1309,"mtime":1629049923628,"results":"49","hashOfConfig":"29"},{"size":15750,"mtime":1629105316469,"results":"50","hashOfConfig":"29"},{"size":352,"mtime":1618324792505,"results":"51","hashOfConfig":"29"},{"size":278,"mtime":1618324792505,"results":"52","hashOfConfig":"29"},{"size":414,"mtime":1618324792505,"results":"53","hashOfConfig":"29"},{"size":211,"mtime":1618324792505,"results":"54","hashOfConfig":"29"},{"size":3497,"mtime":1629047909317,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"yexe87",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/home/robo/Projects/booking/src/index.js",[],["114","115"],"/home/robo/Projects/booking/src/App.js",[],"/home/robo/Projects/booking/src/reportWebVitals.js",[],"/home/robo/Projects/booking/src/routes.js",[],"/home/robo/Projects/booking/src/components/Main.js",[],"/home/robo/Projects/booking/src/utils/routeConstants.js",[],"/home/robo/Projects/booking/src/utils/index.js",[],"/home/robo/Projects/booking/src/components/HoursColumn.js",[],"/home/robo/Projects/booking/src/env.js",[],"/home/robo/Projects/booking/src/actions/playActions.js",[],"/home/robo/Projects/booking/src/actions/actionTypes.js",[],"/home/robo/Projects/booking/src/components/PlayRoom.js",["116"],"import React , { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { getSeats } from '../utils/getSeats'\nimport { findSeat } from '../utils/findSeat'\nimport { getSeatPrice } from '../utils/getSeatPrice'\nimport { getTotalPrice } from '../utils/getTotalPrice'\nimport { getTicketId } from '../utils/getTicketId'\nimport { buildDate } from '../utils/buildDate'\nimport Axios from 'axios'\nimport { url } from '../env'\n\n\n\nconst PlayRoom = ({play, theater, history}) => {\n    const [seats, setSeats] = useState([])\n    const [location, setLocation] = useState({})\n    const [tickets, setTickets] = useState([])\n    const [takenTickets, setTakenTickets] = useState([])\n    const [selectedSeats, setSelectedSeats] = useState([])\n    const [showOrder, setShowOrder] = useState(false)\n    const [customerData, setCustomerData] = useState({})\n    const [presentPlay, setPresentPlay] = useState({})\n    const [admin, setAdmin] = useState('')\n\n    useEffect(() => {\n        const getTickets = () => {\n          Axios.get(url.ticket)\n          .then((res) => {\n              setTickets(res.data)\n          })\n          .catch((err) => {\n              alert(err)\n              console.log(err)\n          })  \n        }\n        getTickets();\n      }, [])\n\n    useEffect(() => {\n        let numberOfSeats = JSON.parse(localStorage.getItem('totalSeats'));\n        let currentPlay = JSON.parse(localStorage.getItem('play'));\n        setSeats(getSeats(numberOfSeats))\n        setLocation(numberOfSeats)\n        setTakenTickets(findSeat(currentPlay,tickets))\n        setPresentPlay(currentPlay)\n    }, [theater, play, tickets]) \n\n    useEffect(() => {\n        let localAdmin = JSON.parse(localStorage.getItem('admin'))\n        setAdmin(localAdmin)\n    })\n\n\n\n    const chooseSeat = (seat) => {\n        if (takenTickets.includes(seat) === true) {\n            return 0\n        }\n        if (!selectedSeats.includes(seat))\n            setSelectedSeats(selectedSeats => [...selectedSeats, seat]);\n        else {\n            setSelectedSeats(selectedSeats.filter(item => item !== seat))\n        }\n    }\n\n    const completeOrder = async (selectedSeats) =>  {\n        let ticketIds = getTicketId(tickets, selectedSeats, presentPlay)\n        let currentDate = buildDate()\n        if (!customerData.fullName) {\n            alert('Enter a name!')\n            return 0\n        }\n        else if (customerData.phoneNumber?.length !== 9){\n            alert('Phone number has to have 9 digits')\n            return 0\n        } else if (!customerData.email.includes('@') || !customerData.email.includes('.')){\n            alert('The E-mail address does not exist')\n            return 0\n        }\n        else{\n            try {\n                const resp = await Axios.post(url.payment, { customerDto: customerData, ticketIds, dateTime: currentDate });\n                console.log(resp.data);\n                alert('Order placed successfully!')\n            } catch (err) {\n                alert(err)\n                console.error(err);\n            }\n        }\n        history.push('/')\n    }\n\n    return (\n        <div>\n            <div className='theater-name' >{location.name}</div>\n            <div className='theater-address' >{location.address}</div>\n            <div className='screen'>STAGE</div>\n            <div className='seat-wrap'>\n                \n                {seats?.map((seat, index) => {\n                    return (\n                        <div key={index} \n                        style={takenTickets.includes(seat) ? {backgroundColor: 'red', cursor:'not-allowed'} : selectedSeats.includes(seat) ? {backgroundColor: '#00cc00', cursor:'pointer'} : {backgroundColor: '#ddd', cursor:'pointer'}}\n                        onClick={() => chooseSeat(seat)}>\n                            <p>Seat no. {seat} - ${getSeatPrice(seat)}</p>\n                        </div>\n                    )\n                })}\n            </div> \n            {selectedSeats?.length > 0 &&\n                <button className='start-order' onClick={() => setShowOrder(true)}>Place Order</button>\n            }\n\n            {admin === null ?\n                <button className='button-to-home' onClick={() => history.push('/')}>Home</button> :\n                <button className='button-to-home' onClick={() => history.push('/control-panel')}>Go to Panel</button>\n            }\n\n            { showOrder && \n                <div className=\"customer-form\">\n                    <form className='form-container'>\n                        <input type=\"text\" name='fullName' placeholder='Full Name'  onChange={e=> setCustomerData({...customerData, [e.target.name]: e.target.value})} />\n                        <input type=\"number\" name='phoneNumber' placeholder='Phone Number' onChange={e=> setCustomerData({...customerData, [e.target.name]: e.target.value})} />\n                        <input type=\"email\" name='email' placeholder='Email' onChange={e=> setCustomerData({...customerData, [e.target.name]: e.target.value})} />\n\n                        <div onClick={() => completeOrder(selectedSeats) } className='place-order'>Complete Order - ${getTotalPrice(selectedSeats)}</div>\n                        <div onClick={() => setShowOrder(false) } className='close-button'>Cancel</div>\n                    </form>\n                </div> \n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n      play: state.playReducer.play,\n      theater: state.theaterReducer.theater,\n    }\n}\n  \nexport default connect(mapStateToProps)(PlayRoom);\n","/home/robo/Projects/booking/src/reducers/rootReducers.js",[],"/home/robo/Projects/booking/src/reducers/playReducer.js",[],"/home/robo/Projects/booking/src/reducers/theaterReducer.js",[],"/home/robo/Projects/booking/src/actions/theaterActions.js",[],"/home/robo/Projects/booking/src/utils/getSeats.js",[],"/home/robo/Projects/booking/src/utils/findSeat.js",[],"/home/robo/Projects/booking/src/utils/getSeatPrice.js",[],"/home/robo/Projects/booking/src/utils/getTotalPrice.js",[],"/home/robo/Projects/booking/src/components/Admin.js",[],"/home/robo/Projects/booking/src/components/ControlPanel.js",["117","118","119","120"],"import React, {useState, useEffect} from 'react';\nimport { betterColors, getCurrentTime, getTimeAxe, getVanueAxe } from '../utils/index.js';\nimport { formatDate } from '../utils/formatDate.js';\nimport { buildDateNewPlay } from '../utils/buildDateNewPlay';\nimport DatePicker from 'react-datepicker';\nimport { HoursColumn } from './HoursColumn.js';\nimport Axios from 'axios';\nimport { url } from '../env'\n\nimport { updatePlay } from '../actions/playActions'\nimport { updateTheater } from '../actions/theaterActions'\n\nimport { connect } from 'react-redux'\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nconst ControlPanel = ({dispatch, history}) => {\n  const [events, setEvents] = useState()\n  const [columns, setColumns] = useState([])\n  const [startDate, setStartDate] = useState(new Date());\n  const [hideCalendar, setHideCalendar] = useState(true)\n  const [theaterId, setTheaterId] = useState()\n  const [playName, setPlayName] = useState('')\n  const [startTime, setStartTime] = useState('')\n  const [endTime, setEndTime] = useState('')\n  const [isEditing, setIsEditing] = useState(0)\n  const [editTheaterId, setEditTheaterId] = useState()\n  const [editName, setEditName] = useState()\n  const [editStart, setEditStart] = useState()\n  const [editEnd, setEditEnd] = useState()\n  const [editDate, setEditDate] = useState()\n  const [tickets, setTickets] = useState()\n  const [theaterForm, setTheaterForm] = useState(false)\n  const [newTheater, setNewTheater] = useState({})\n  const [playForm, setPlayForm] = useState(false)\n\n  useEffect(() => {\n    const getPlays = () => {\n      Axios.get(url.play)\n      .then((res) => {\n          setEvents(res.data)\n      })\n      .catch((err) => {\n          console.log(err)\n          alert(err)\n      })  \n    }\n    \n    window.scrollTo({\n      top: 400,\n      behavior: 'smooth'\n    });\n    getPlays();\n  }, [])  \n\n  useEffect(() => {\n    const getTheater = () => {\n      Axios.get(url.theater)\n      .then((res) => {\n          setColumns(res.data)\n          setTheaterId(res.data[0].id)\n      })\n      .catch((err) => {\n          console.log(err)\n          alert(err)\n      })  \n    }\n    getTheater();\n  }, []) \n\n  useEffect(() => {\n    const getTicket = () => {\n      Axios.get(url.ticket)\n      .then((res) => {\n          setTickets(res.data)\n      })\n      .catch((err) => {\n          console.log(err)\n          alert(err)\n      })  \n    }\n    getTicket();\n  }, []) \n\n  const postNewPlay = () => {\n    let start = buildDateNewPlay(startDate, startTime)\n    let end = buildDateNewPlay(startDate, endTime)\n    Axios.post(url.play, {theaterId:theaterId ,name: playName, start, end})\n    .then((res) => {\n        console.log(res.data)\n    })\n    .catch((err) => {\n        console.log(err)\n        alert(err)\n    })\n  }\n\n  const selectPlay = (event, columns) => {\n    if(isEditing !== event.id) {\n      for(let i in columns){\n        if(columns[i].id === event.theaterId){\n          dispatch(updateTheater(columns[i]))\n          localStorage.setItem('totalSeats', JSON.stringify(columns[i]));\n          localStorage.setItem('play', JSON.stringify(event));\n        }\n      }\n      dispatch(updatePlay(event))\n      history.push('/play')\n    }\n  }\n\n  const startEditing = (play) => {\n    setIsEditing(play.id)\n    setEditTheaterId(play.theaterId)\n    setEditName(play.name)\n    setEditStart(play.start.slice(11,19))\n    setEditEnd(play.end.slice(11,19))\n    setEditDate(play.start.slice(0,10))\n  }\n\n  const editHandler = () => {\n    if (!editStart.includes(':') || !editEnd.includes(':')) {\n      alert('The hour format is: \"00:00:00\"')\n      return 0\n    }\n    for(let i in events) {\n      if (events[i].id !== isEditing && events[i].theaterId === editTheaterId && events[i].start.slice(0,10) === editDate && \n          ((events[i].start.slice(11,13) >= editStart.slice(0,2)  && events[i].start.slice(11,13) < editEnd.slice(0,2) ) || \n          (events[i].end.slice(11,13) > editStart.slice(0,2) && events[i].end.slice(11,13) <= editEnd.slice(0,2)) )) {\n        alert(\"There is another play during that time at that theatre!\")\n        return 0\n      }\n    }\n  \n    let start = editDate + 'T' + editStart + '.000+00:00'\n    let end = editDate + 'T' + editEnd + '.000+00:00'\n    Axios.put(url.play, {id:isEditing ,theaterId:editTheaterId, name: editName, start, end})\n      .then((res) => {\n          console.log(res.data)\n      })\n      .catch((err) => {\n          console.log(err)\n          alert(err)\n      })\n    setIsEditing(0)\n  }\n\n  const deletePlay = (play) => {\n    let id = play.id\n    for (let i in tickets) {\n      if(tickets[i].playId === id && tickets[i].customerId !== null && play.start.slice(0,10) > formatDate(startDate)){\n        alert('You cannnot delete plays with sold tickets!')\n        return 0\n      }\n    }\n    Axios.delete(url.play, {id})\n    .then((res) => {\n        console.log(res.data)\n        alert(\"Play deleted successfully\")\n    })\n    .catch((err) => {\n        console.log(err)\n        alert(err)\n    })\n  }\n\n  const getName = (id) => {\n    for(let i in columns) {\n      if(columns[i].id === id)\n        return columns[i].name\n    }\n  }\n\n  const addTheater = () => {\n    Axios.post(url.theater, { name: newTheater.name, numberOfSeats: newTheater.numberOfSeats, address: newTheater.address });\n    setTheaterForm(false)\n  }\n\n  const logOut = () => {\n    localStorage.removeItem('admin')\n    history.push('/')\n  }\n\n  \n  return (\n    <div>\n      <div className='header-cont'>\n        <div className='control-panel'>Control Panel</div>\n        {hideCalendar ?\n            <button className='show-calendar' onClick={() => setHideCalendar(!hideCalendar)}>Show Calendar</button>:\n            <button className='show-calendar' onClick={() => setHideCalendar(!hideCalendar)}>Edit Plays</button>\n        }\n        {hideCalendar ? \n            <div style={{display: 'none'}}></div> :\n            <ul className='columns'>\n            {columns?.map((column, index) => <li key={index} style={{ width: `${100/columns.length}%`}} >{column.name}</li>)}\n            </ul> \n        }\n        <button className='payment-history' onClick={() => history.push('/payment-history')}>Payment History</button>\n        <button className='log-out' onClick={() => logOut()}>Log out</button>\n        <button className='add-theater' onClick={() => setTheaterForm(true)}>Add Theater</button>\n        <button className='add-play' onClick={() => setPlayForm(true)}>Add Play</button>\n      </div>\n\n      { theaterForm && \n        <div className=\"customer-form\">\n            <form className='form-container'>\n                <input type=\"text\" name='name' placeholder='Name Of The Theater'  onChange={e=> setNewTheater({...newTheater, [e.target.name]: e.target.value})}/>\n                <input type=\"number\" name='numberOfSeats' placeholder='Number Of Seats' onChange={e=> setNewTheater({...newTheater, [e.target.name]: e.target.value})}/>\n                <input type=\"text\" name='address' placeholder='Address' onChange={e=> setNewTheater({...newTheater, [e.target.name]: e.target.value})}/>\n\n\n                <div onClick={() => addTheater() } className='place-order'>Add Theater</div>\n                <div onClick={() => setTheaterForm(false) } className='close-button'>Cancel</div>\n            </form>\n        </div> \n      }\n\n      { playForm && \n        <div className=\"customer-form\">\n          <form className='form-container'>\n            <div className='theater-picker'>\n              <label htmlFor=\"theater\">Theater:</label>\n              <select name=\"theater\" id=\"theater\" onChange={e => setTheaterId(e.target.value)}>\n                  {columns?.map((theater, index) => <option key={index} value={theater.id}>{theater.name}</option>)}\n              </select>\n            </div>\n            <div>\n                <label htmlFor=\"name\">Name:</label>\n                <input type=\"text\" name='name' placeholder='Play Title' onChange={e => setPlayName(e.target.value)}/>\n            </div>\n            <div>\n                <label htmlFor=\"start\">Start:</label>\n                <input type=\"text\" name='start' placeholder='00:00:00' onChange={e => setStartTime(e.target.value)}/>\n            </div>\n            <div>\n                <label htmlFor=\"end\">End:</label>\n                <input type=\"text\" name='end' placeholder='00:00:00' onChange={e => setEndTime(e.target.value)}/>\n            </div>\n            <div className='date-picker-control'>\n                <label htmlFor=\"date\">Enter date:</label>\n                <DatePicker name='date' dateFormat=\"yyyy/MM/dd\" selected={startDate} onChange={date => setStartDate(date)} /> \n            </div>\n\n            <div className='place-order' onClick={() => postNewPlay()}>Create Play</div>\n            <div onClick={() => setPlayForm(false) } className='close-button'>Cancel</div>\n\n          </form>\n        </div> \n      }\n\n      {!hideCalendar &&\n\n        <div className=\"wr\">\n            <HoursColumn />\n\n            <div className=\"events-canvas\">\n\n            {formatDate(startDate) === formatDate(new Date()) ? \n            <div \n              className='current-time-bar' \n              style={{\n                top: `${getCurrentTime()}%`\n              }}\n            ></div> :\n            <div style={{display:'none'}}></div>\n            }\n\n            {events?.map((event, index)=> {        \n                return(\n                <div key={index} style={event.start.substring(0,10) === formatDate(startDate) ? {\n                    position: 'absolute',\n                    top: `${getTimeAxe(event.start[11]+event.start[12], event.start[14]+event.start[15])}%`,\n                    left: `${getVanueAxe(event, columns)}%`,\n                    height: `${(parseInt(event.end[11]+event.end[12])*60) - (parseInt(event.start[11]+event.start[12])*60)}px`,\n                    width: `${100/columns.length}%`,\n                    backgroundColor: `${betterColors()}`,\n                    color: 'white'\n                } : {display:'none'}}>\n                    <p>{ event.name }</p>\n                </div>\n                )\n            })}\n            </div>\n\n        </div>\n      }\n      { hideCalendar && \n        <div>\n          <div className='editable-title'>Plays:</div>\n          <div className='editable'>\n            {events?.map((play, key) => {\n              return (\n                <div key={key} className='play-details'>\n                  <div onClick={() => selectPlay(play, columns)} style={{cursor: 'pointer'}}>\n                    <label htmlFor=\"edit-id\">Theater :</label>\n                    {isEditing === play.id ? (\n                      <input\n                        name='edit-id'\n                        onChange={e => setEditTheaterId(e.target.value)}\n                        placeholder={getName(play.theaterId)}\n                      >\n                      </input>\n                    ) : (\n                      <div\n                        name='edit-id'\n                        style={{marginLeft:'20px', marginTop:'5px'}}\n                      >\n                        <span>\n                          {getName(play.theaterId)}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div onClick={() => selectPlay(play, columns)} style={{cursor: 'pointer'}}>\n                    <label htmlFor=\"edit-name\">Play name:</label>\n                    {isEditing === play.id ? (\n                      <input\n                        name='edit-name'\n                        onChange={e => setEditName(e.target.value)}\n                        placeholder={play.name}\n                      >\n                      </input>\n                    ) : (\n                      <div\n                        name='edit-name'\n                        style={{marginTop:'5px'}}\n                        onClick={() => selectPlay(play, columns)} style={{cursor: 'pointer'}}\n                      >\n                        <span>\n                          {play.name}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div onClick={() => selectPlay(play, columns)} style={{cursor: 'pointer'}}>\n                    <label htmlFor=\"edit-start\">Starting hour:</label>\n                    {isEditing === play.id ? (\n                      <input\n                        name='edit-start'\n                        onChange={e => setEditStart(e.target.value)}\n                        placeholder={play.start.slice(11,19)}\n                      >\n                      </input>\n                    ) : (\n                      <div\n                        style={{marginTop:'5px'}}\n                        name='edit-start'\n                        onClick={() => selectPlay(play, columns)} style={{cursor: 'pointer'}}\n                      >\n                        <span>\n                          {play.start.slice(11,19)}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div onClick={() => selectPlay(play, columns)} style={{cursor: 'pointer'}}>\n                    <label htmlFor=\"edit-end\">Ending hour:</label>\n                    {isEditing === play.id ? (\n                      <input\n                        name='edit-end'\n                        onChange={e => setEditEnd(e.target.value)}\n                        placeholder={play.end.slice(11,19)}\n                      >\n                      </input>\n                    ) : (\n                      <div\n                        style={{marginTop:'5px'}}\n                        name='edit-end'\n                        onClick={() => selectPlay(play, columns)} style={{cursor: 'pointer'}}\n                      >\n                        <span>\n                          {play.end.slice(11,19)}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div onClick={() => selectPlay(play, columns)} style={{cursor: 'pointer'}}>\n                    <label htmlFor=\"edit-date\">Date:</label>\n                    {isEditing === play.id ? (\n                      <input\n                        name='edit-date'\n                        onChange={e => setEditDate(e.target.value)}\n                        placeholder={play.start.slice(0,10)}\n                      >\n                      </input>\n                    ) : (\n                      <div\n                        style={{marginTop:'5px'}}\n                        name='edit-date'\n                        onClick={() => selectPlay(play, columns)} style={{cursor: 'pointer'}}\n                      >\n                        <span>\n                          {play.start.slice(0,10)}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  { isEditing === play.id ?\n                    <button className='abort-changes' onClick={() => setIsEditing(0)}>Abort changes</button> : \n                    <div style={{display:'none'}}></div>\n                  }\n                  {isEditing === play.id ?\n                    <button className='edit-button' onClick={() => editHandler()}> Save changes</button> :\n                    <button className='edit-button' onClick={() => startEditing(play)}> Edit play</button>\n                  }\n                  <button className='delete-button' onClick={() => deletePlay(play)}>Delete</button>\n                </div>\n                )\n              })}\n              <dir className='footer'></dir>\n            </div>\n          </div>\n      }\n    </div>\n  );\n}\n\n\n\n\n// const mapStateToProps = state => {\n//   return {\n//     theater: state.theaterReducer.theater,\n//   }\n// }\n\nexport default connect()(ControlPanel)","/home/robo/Projects/booking/src/utils/formatDate.js",[],"/home/robo/Projects/booking/src/utils/getTicketId.js",[],"/home/robo/Projects/booking/src/utils/buildDate.js",[],"/home/robo/Projects/booking/src/utils/buildDateNewPlay.js",[],["121","122"],"/home/robo/Projects/booking/src/components/PaymentHistory.js",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":48,"column":5,"nodeType":"129","endLine":48,"endColumn":14,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":329,"column":67,"nodeType":"133","endLine":329,"endColumn":94},{"ruleId":"131","severity":1,"message":"132","line":350,"column":67,"nodeType":"133","endLine":350,"endColumn":94},{"ruleId":"131","severity":1,"message":"132","line":371,"column":67,"nodeType":"133","endLine":371,"endColumn":94},{"ruleId":"131","severity":1,"message":"132","line":392,"column":67,"nodeType":"133","endLine":392,"endColumn":94},{"ruleId":"123","replacedBy":"134"},{"ruleId":"125","replacedBy":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setAdmin'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["138"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["136"],["137"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},"Add dependencies array: []",{"range":"141","text":"142"},[1759,1759],", []"]